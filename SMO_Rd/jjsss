default:
  image: maven:3.9.9-eclipse-temurin-17

variables:
  SONAR_HOST_URL: "https://sonarqube.engine.capgemini.com"
  FM_PROJECT_KEY: "SMO_FM"
  CM_PROJECT_KEY: "SMO_CM"
  PM_PROJECT_KEY: "SMO_PM"
  RO_PROJECT_KEY: "SMO_RO"
  SM_PROJECT_KEY: "SMO_SM"
  TM_PROJECT_KEY: "SMO_TM"
  UM_PROJECT_KEY: "SMO_UM"  
  FM_LOGIN_TOKEN: "sqp_5b4194766cf960ebf9ebdfaa914734b870ca0c50"
  CM_LOGIN_TOKEN: "sqp_f4bb6fcc7eb09eccc8ce41fc52591ca5a6446f8f"
  PM_LOGIN_TOKEN: "sqp_fa1946ea558b482ba564dff9447b7ab46698e651"
  RO_LOGIN_TOKEN: "sqp_a3425c79996c9df55a3f1e42b1262513bcba2daf"
  SM_LOGIN_TOKEN: "sqp_16789b9adf4605d521e3f73cfc95b005c4dce8ec"
  TM_LOGIN_TOKEN: "sqp_2c83925fa82705811a67b50cba8dc376a7657fab"
  UM_LOGIN_TOKEN: "sqp_cd13d2a67ec54f7f0ceab5228a63f0f74fee81ae"
  USE_BRANCH: "SMO-538_cicd"
before_script:
  - cd smo-backend/sdnc_client_util
  - mvn clean install
  - cd ..

after_script:
  - echo "Running common cleanup commands..."
  - apt-get clean

stages:
  - build_and_test_fault-manager
  - build_and_test_configuration-manager
  # - build_and_test_performance-manager
  - build_and_test_ran-onboarder
  - build_and_test_topology-manager  
  - package_artifacts
  - send_email

build_and_test_fault-manager:
  stage: build_and_test_fault-manager
  script:
    - cd fault_manager
    - mvn clean install
    - mvn jacoco:report
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn sonar:sonar -Dsonar.projectKey=$FM_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$FM_LOGIN_TOKEN 
       else
         echo "Skipping SonarQube analysis of configuration_manager for non-main branch"
       fi  
  artifacts:
    paths:
      - smo-backend/fault_manager/target/site/jacoco/
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/fault_manager/**/*

build_and_test_configuration-manager:
  stage: build_and_test_configuration-manager
  script:
    - cd configuration_manager
    - mvn clean install
    - mvn jacoco:report
    # - ls -la target/site/jacoco/
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn sonar:sonar -Dsonar.projectKey=$CM_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$CM_LOGIN_TOKEN 
       else
         echo "Skipping SonarQube analysis of configuration_manager for non-main branch"
       fi  
  artifacts:
    paths:
      - smo-backend/configuration_manager/target/site/jacoco/
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/configuration_manager/**/*

# build_and_test_performance-manager:
#   stage: build_and_test_performance-manager
#   script:
#     - cd performance_manager
#     - mvn clean install
#     - mvn jacoco:report
#   artifacts:
#     paths:
#       - smo-backend/performance_manager/target/site/jacoco/
#   tags:
#     - docker
# rules:
#     - changes:
#         - smo-backend/performance_manager/**

build_and_test_ran-onboarder:
  stage: build_and_test_ran-onboarder
  script:
    - cd ran-onboarder
    - mvn clean install
    - mvn jacoco:report
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn sonar:sonar -Dsonar.projectKey=$RO_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$RO_LOGIN_TOKEN 
       else
         echo "Skipping SonarQube analysis of configuration_manager for non-main branch"
       fi 
  artifacts:
    paths:
      - smo-backend/ran-onboarder/target/site/jacoco/
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/ran-onboarder/**/*

build_and_test_topology-manager:
  stage: build_and_test_topology-manager
  script:
    - cd topology_manager
    - mvn clean install
    - mvn jacoco:report
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn sonar:sonar -Dsonar.projectKey=$TM_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$TM_LOGIN_TOKEN 
       else
         echo "Skipping SonarQube analysis of configuration_manager for non-main branch"
       fi 
  artifacts:
    paths:
      - smo-backend/topology_manager/target/site/jacoco/
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/topology_manager/**/*

package_artifacts:
  stage: package_artifacts
  before_script: []
  script:
    - apt-get update && apt-get install -y zip
    - if [ -d smo-backend/fault_manager/target/site/jacoco ]; then mkdir -p combined_artifacts/fault_manager && cp -r smo-backend/fault_manager/target/site/jacoco/* combined_artifacts/fault_manager/; fi
    - if [ -d smo-backend/configuration_manager/target/site/jacoco ]; then mkdir -p combined_artifacts/configuration_manager && cp -r smo-backend/configuration_manager/target/site/jacoco/* combined_artifacts/configuration_manager/; fi
    # - if [ -d smo-backend/performance_manager/target/site/jacoco ]; then mkdir -p combined_artifacts/performance_manager && cp -r smo-backend/performance_manager/target/site/jacoco/* combined_artifacts/performance_manager/; fi
    - if [ -d smo-backend/ran-onboarder/target/site/jacoco ]; then mkdir -p combined_artifacts/ran-onboarder && cp -r smo-backend/ran-onboarder/target/site/jacoco/* combined_artifacts/ran-onboarder/; fi
    - if [ -d smo-backend/topology_manager/target/site/jacoco ]; then mkdir -p combined_artifacts/topology_manager && cp -r smo-backend/topology_manager/target/site/jacoco/* combined_artifacts/topology_manager/; fi
    - zip -r combined_artifacts.zip combined_artifacts
  artifacts:
    paths:
      - combined_artifacts.zip
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/fault_manager/**
        - smo-backend/configuration_manager/**
        # - smo-backend/performance_manager/**
        - smo-backend/ran-onboarder/**
        - smo-backend/topology_manager/**

.send_email:
  stage: send_email
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y msmtp sharutils mutt
    - echo -e "account default\nhost email-smtp.eu-west-3.amazonaws.com\nport 587\nauth on\nuser $SMTP_USER\npassword $SMTP_PASS\nfrom noreply@engine.capgemini.com\ntls on\ntls_starttls on\nlogfile ~/.msmtp.log" > ~/.msmtprc
    - chmod 600 ~/.msmtprc

  script:
    - echo "Creating email body..."    
    - echo "Hello Team,\n\nThe job has completed with status $CI_JOB_STATUS\n" > email_body.txt
    - echo "Job Link:- $CI_PIPELINE_URL\n\n Artifacts are attached." >> email_body.txt
    - echo "Hello" >> test.txt
    - mutt -s "Job Notification - $CI_JOB_NAME" -a test.txt -- preeja.jayarajan@capgemini.com rohan.b.jadhav@capgemini.com < email_body.txt  
  after_script:
    - echo -e "Subject:SMO-UT-Coverage Job Status\n\nHello Team,\n\nSMO-UT-Coverage Status.\n\nStatus:- $CI_JOB_STATUS\nJob Link:- $CI_PIPELINE_URL\n\nBest Regards,\nSMO Team" | msmtp --debug preeja.jayarajan@capgemini.com
       
#      - echo -e "Subject:SMO-UT-Coverage Job Status\n\nHello Team,\n\nSMO-UT-Coverage Status.\n\nStatus:- $CI_JOB_STATUS\nJob Link:- $CI_PIPELINE_URL\n\nBest Regards,\nSMO Team" | msmtp --debug preeja.jayarajan@capgemini.com pooja.a.garg@capgemini.com
#    - cat smo-backend/fault_manager/target/site/jacoco/index.html | msmtp --debug preeja.jayarajan@capgemini.com
  tags:
    - dind 

.email-notification:
    stage: send_email
    image: ubuntu:latest
    before_script:
        - apt-get update && apt-get install -y msmtp sharutils mutt
        - echo -e "account default\nhost email-smtp.eu-west-3.amazonaws.com\nport 587\nauth on\nuser $SMTP_USER\npassword $SMTP_PASS\nfrom noreply@engine.capgemini.com\ntls on\ntls_starttls on\nlogfile ~/.msmtp.log" > ~/.msmtprc
        - chmod 600 ~/.msmtprc
    script:
        - echo "Hello" >> test.txt
        - ls -la
        - |
           (
            echo "Subject:SMO-UT-Coverage Job Status"
            echo "To:preeja.jayarajan@capgemini.com,rohan.b.jadhav@capgemini.com"
            echo "MIME-Version:1.0"
            echo "Content-Type:multipart/mixed; boundary=\"FILEBOUNDARY\""
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:text/plain"
            echo
            echo -e "Hello, please find the attached txt files \n\nBuild_Number:$CI_PIPELINE_ID\ncommit_id:$CI_COMMIT_BRANCH\nBuild_URL:\n$CI_PIPELINE_URL\n\n\nThanks & Regards,\nDevOps Team"
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:text/plain; name=\"test.txt\""
            echo "Content-Transfer-Encoding:base64"
            echo "Content-Disposition:attachment; filename=\"test.txt\""
            echo
            base64 test.txt
            echo
            echo "--FILEBOUNDARY--"
            ) | msmtp -t
    tags:
        - dind

email-notification:
    stage: send_email
    image: ubuntu:latest
    before_script:
        - apt-get update && apt-get install -y msmtp sharutils mutt
        - echo -e "account default\nhost email-smtp.eu-west-3.amazonaws.com\nport 587\nauth on\nuser $SMTP_USER\npassword $SMTP_PASS\nfrom noreply@engine.capgemini.com\ntls on\ntls_starttls on\nlogfile ~/.msmtp.log" > ~/.msmtprc
        - chmod 600 ~/.msmtprc
    script:
        - echo "Preparing email notification..."
        - echo "Hello" >> test.txt
        - ls -la
    after_script:
        - set -x
        - |
           (
            echo "Subject:SMO-UT-Coverage Job Status: $CI_JOB_STATUS"
            echo "To:preeja.jayarajan@capgemini.com,tarun.b.verma@capgemini.com"
            echo "MIME-Version:1.0"
            echo "Content-Type:multipart/mixed; boundary=\"FILEBOUNDARY\""
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:text/plain"
            echo
            echo -e "Hello, please find the attached txt files \n\nBuild_Number: $CI_PIPELINE_ID\nCommit_Branch: $CI_COMMIT_BRANCH\nJob_Status: $CI_JOB_STATUS\nBuild_URL:\n$CI_PIPELINE_URL\n\n\nThanks & Regards,\nDevOps Team"
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:text/plain; name=\"test.txt\""
            echo "Content-Transfer-Encoding:base64"
            echo "Content-Disposition:attachment; filename=\"test.txt\""
            echo
            base64 test.txt
            echo
            echo "--FILEBOUNDARY--"
            ) | msmtp -t
    tags:
        - dind
