default:
  image: maven:3.9.9-eclipse-temurin-17

# define variables 
variables:
  SONAR_HOST_URL: "https://sonarqube.engine.capgemini.com"
  FM_PROJECT_KEY: "SMO_FM"
  CM_PROJECT_KEY: "SMO_CM"
  PM_PROJECT_KEY: "SMO_PM"
  RO_PROJECT_KEY: "SMO_RO"
  SM_PROJECT_KEY: "SMO_SM"
  TM_PROJECT_KEY: "SMO_TM"
  UM_PROJECT_KEY: "SMO_UM"  
  FM_LOGIN_TOKEN: "sqp_5b4194766cf960ebf9ebdfaa914734b870ca0c50"
  CM_LOGIN_TOKEN: "sqp_f4bb6fcc7eb09eccc8ce41fc52591ca5a6446f8f"
  PM_LOGIN_TOKEN: "sqp_fa1946ea558b482ba564dff9447b7ab46698e651"
  RO_LOGIN_TOKEN: "sqp_a3425c79996c9df55a3f1e42b1262513bcba2daf"
  SM_LOGIN_TOKEN: "sqp_16789b9adf4605d521e3f73cfc95b005c4dce8ec"
  TM_LOGIN_TOKEN: "sqp_2c83925fa82705811a67b50cba8dc376a7657fab"
  UM_LOGIN_TOKEN: "sqp_cd13d2a67ec54f7f0ceab5228a63f0f74fee81ae"
  USE_BRANCH: "ci_cd_updated"
  USER_TOKEN: "squ_c8516f76c6b484560e6dbaa1ac8cd025e3dfd4c8"

# sdnc is needed as dependecy in other modules 
before_script:
  - cd smo-backend/sdnc_client_util
  - mvn clean install
  - cd ..

# cleaning local repo of downloaded package files
after_script:
  - echo "Running common cleanup commands..."
  - apt-get clean

# creating default template for modules having UT
.default-maven-sonar-jacoco-job: &default-maven-sonar-jacoco-job
  image: maven:3.9.9-eclipse-temurin-17
  tags:
    - docker
  script:
    #- apt-get update && apt-get install -y unzip
    - cd $MODULE_PATH
    - mvn clean install
    - mvn jacoco:report
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=${SONAR_LOGIN_TOKEN} \
        -Dsonar.exclusions=**/test/**

      sleep 10

      mkdir -p target/site/jacoco

      curl -f -u ${USER_TOKEN}: -o target/site/jacoco/sonar-report.zip "${SONAR_HOST_URL}/api/cnesreport/report?key=SMO_FM&language=en_US&author=tverma1&token=squ_e87c0527eed17647e84ec802ddb5eaee134025a8&enableDocx=false&enableMd=false&enableXlsx=true&enableCsv=false&enableConf=false&generation=Generate"

      #unzip -o target/site/jacoco/sonar-report.zip -d target/site/jacoco

      else
         echo "Skipping Sonarqube analysis of ${MODULE_NAME} for non-main branch"
      fi
  artifacts:
      paths:
        - smo-backend/${MODULE_NAME}/target/site/jacoco
  rules:
    - changes:
      - smo-backend/${MODULE_PATH}/**/*                

# creating default template for modules without UT
.default-maven-sonar-job: &default-maven-sonar-job
  image: maven:3.9.9-eclipse-temurin-17
  tags:
    - docker
  script:
    - cd $MODULE_PATH
    - mvn clean install
    - |
      if [ "$CI_COMMIT_BRANCH" = "$USE_BRANCH" ]; then
        mvn sonar:sonar \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=${SONAR_LOGIN_TOKEN}
      else
         echo "Skipping Sonarqube analysis of ${MODULE_NAME} for non-main branch"
      fi
  artifacts:
      paths:
        - smo-backend/${MODULE_NAME}/target/site/jacoco
  rules:
    - changes:
      - smo-backend/${MODULE_PATH}/**/* 

# defining jobs step by step
# every job will run in diffrent runner
stages:
  - build_and_test_fault-manager
  - build_and_test_configuration-manager
  #- build_and_test_performance-manager
  - build_and_test_ran-onboarder
  - build_and_test_topology-manager
  - build_software_manager
  - build_user-management  
  - package_artifacts
  - send_email

build_and_test_fault-manager:
  stage: build_and_test_fault-manager
  extends: .default-maven-sonar-jacoco-job
  variables:
    MODULE_PATH: "fault_manager"
    MODULE_NAME: "fault_manager"
    SONAR_PROJECT_KEY: "$FM_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$FM_LOGIN_TOKEN"

build_and_test_configuration-manager:
  stage: build_and_test_configuration-manager
  extends: .default-maven-sonar-jacoco-job
  variables:
    MODULE_PATH: "configuration_manager"
    MODULE_NAME: "configuration_manager"
    SONAR_PROJECT_KEY: "$CM_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$CM_LOGIN_TOKEN"
  

#build_and_test_performance-manager:
 # stage: build_and_test_performance-manager
  #variables:
   # MODULE_PATH: "performance-manager"
    #MODULE_NAME: "performance-manager"
    #SONAR_PROJECT_KEY: "$PM_PROJECT_KEY"
    #SONAR_LOGIN_TOKEN: "$PM_LOGIN_TOKEN"
 

build_and_test_ran-onboarder:
  stage: build_and_test_ran-onboarder
  extends: .default-maven-sonar-jacoco-job
  variables:
    MODULE_PATH: "ran-onboarder"
    MODULE_NAME: "ran-onboarder"
    SONAR_PROJECT_KEY: "$RO_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$RO_LOGIN_TOKEN"
  

build_and_test_topology-manager:
  stage: build_and_test_topology-manager
  extends: .default-maven-sonar-jacoco-job
  variables:
    MODULE_PATH: "topology_manager"
    MODULE_NAME: "topology_manager"
    SONAR_PROJECT_KEY: "$TM_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$TM_LOGIN_TOKEN"

build_software_manager:
  stage: build_software_manager
  extends: .default-maven-sonar-job
  variables:
    MODULE_PATH: "software_manager"
    MODULE_NAME: "software_manager"
    SONAR_PROJECT_KEY: "$SM_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$SM_LOGIN_TOKEN"

build_user-management:
  stage: build_user-management
  extends: .default-maven-sonar-job
  variables:
    MODULE_PATH: "user-management"
    MODULE_NAME: "user-management"
    SONAR_PROJECT_KEY: "$UM_PROJECT_KEY"
    SONAR_LOGIN_TOKEN: "$UM_LOGIN_TOKEN"    

# collecting the jacoco reports 
package_artifacts:
  stage: package_artifacts
  before_script: []
  script:
    - apt-get update && apt-get install -y zip
    - |
      for module in fault_manager configuration_manager ran-onboarder topology_manager; do
        JACOCO_DIR="smo-backend/$module/target/site/jacoco"
        if [ -d "$JACOCO_DIR" ]; then
        mkdir -p "combined_artifacts/$module"
        cp -r "$JACOCO_DIR"/* "combined_artifacts/$module/"
        else
        echo "No JaCoCo report found for $module"
        fi
       done
    - zip -r combined_artifacts.zip combined_artifacts
  artifacts:
    paths:
      - combined_artifacts.zip
  tags:
    - docker
  rules:
    - changes:
        - smo-backend/fault_manager/**/*
        - smo-backend/configuration_manager/**/*
        # - smo-backend/performance_manager/**/*
        - smo-backend/ran-onboarder/**/*
        - smo-backend/topology_manager/**/*
        

email-notification:
    stage: send_email
    image: ubuntu:latest
    dependencies:
      - package_artifacts
    before_script:
        - apt-get update && apt-get install -y msmtp sharutils mutt
        - echo -e "account default\nhost email-smtp.eu-west-3.amazonaws.com\nport 587\nauth on\nuser $SMTP_USER\npassword $SMTP_PASS\nfrom noreply@engine.capgemini.com\ntls on\ntls_starttls on\nlogfile ~/.msmtp.log" > ~/.msmtprc
        - chmod 600 ~/.msmtprc
    script:
        - echo "Preparing email notification..."
        - ls -lh combined_artifacts.zip
        - ls -la
        - |
           (
            echo "Subject:SMO-UT-Coverage Job Status: $CI_JOB_STATUS"
            echo "To:tarun.b.verma@capgemini.com,pooja.a.garg@capgemini.com,suhail.khan@capgemini.com"
            echo "MIME-Version:1.0"
            echo "Content-Type:multipart/mixed; boundary=\"FILEBOUNDARY\""
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:text/plain"
            echo
            echo -e "Hello, please find the attached combined artifacts \n\nBuild_Number: $CI_PIPELINE_ID\nCommit_Branch: $CI_COMMIT_BRANCH\nJob_Status: $CI_JOB_STATUS\nBuild_URL:\n$CI_PIPELINE_URL\n\n\nThanks & Regards,\nSMO Team"
            echo
            echo "--FILEBOUNDARY"
            echo "Content-Type:application/zip; name=\"combined_artifacts.zip\""
            echo "Content-Transfer-Encoding:base64"
            echo "Content-Disposition:attachment; filename=\"combined_artifacts.zip\""
            echo
            base64 combined_artifacts.zip
            echo
            echo "--FILEBOUNDARY--"
            ) | msmtp -t
    artifacts:
      paths:
        - combined_artifacts.zip      
    tags:
        - dind
    rules:
    - changes:
        - smo-backend/fault_manager/**/*
        - smo-backend/configuration_manager/**/*
        # - smo-backend/performance_manager/**/*
        - smo-backend/ran-onboarder/**/*
        - smo-backend/topology_manager/**/*    
