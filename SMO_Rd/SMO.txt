

Links: https://www.redhat.com/en/topics/5g-networks/what-is-radio-access-network,  https://www.parallelwireless.com/blog/an-overview-of-o-ran-architecture/

Source : Chat GPT

// ************************************** Radio Access Network (RAN)  ***********************************************

Radio Access Network (RAN) — Simplified Explanation

The Radio Access Network (RAN) is the part of a telecom network that connects your mobile device (phone, tablet, etc.) to the core network using radio signals.

//  Basic Components of Traditional RAN:

User Equipment (UE)

→ Your mobile phone or any connected device

Base Station (BTS/eNodeB/gNodeB)

→ Equipment at the tower that handles:

Radio signal transmission/reception

Communication with the mobile device

Backhaul Link

→ Connects the base station to the core network (via fiber, microwave, etc.)

// Functionality of RAN:

Connects and manages mobile devices

Handles handovers as users move between towers

Controls power, frequency, and bandwidth allocation

Ensures low latency and high-speed communication

// Evolution of RAN:

Generation	RAN Technology	Description
2G	GSM-RAN	Voice-focused
3G	UTRAN	Added mobile data
4G	E-UTRAN (eNodeB)	High-speed LTE
5G	NG-RAN (gNodeB)	Ultra-fast, low latency, supports slicing

// Now with O-RAN (Open RAN):

The RAN is disaggregated into multiple components:

RU (Radio Unit)

DU (Distributed Unit)

CU (Central Unit)

These parts communicate over open interfaces

Allows multi-vendor networks and greater flexibility


//  ***************************************************************** O-RAN  ****************************************************************** 

O-RAN stands for Open Radio Access Network. Its  a modern telecom initiative that aims to make mobile networks more flexible, cost-efficient, and open by allowing components from different vendors to work together.

//What Problem Does O-RAN Solve?

Traditionally, telecom networks are closed and vendor-locked — one company (like Nokia, Ericsson, or Huawei) provides everything: hardware, software, and interfaces. This makes:

Upgrades expensive

Innovation slower

Interoperability harder

//  What Is O-RAN?

O-RAN is an open architecture for building the Radio Access Network (RAN) — the part of the mobile network that connects your phone to the core network via towers.

O-RAN allows different components (hardware/software) from different vendors to interoperate using standardized open interfaces.

// Key Components of O-RAN

Radio Unit (RU)

    Located at the tower

    Sends/receives signals to mobile devices

Distributed Unit (DU)

   Handles real-time processing (e.g., scheduling)

Central Unit (CU)

  Handles non-real-time functions (e.g., mobility, security)

RIC (RAN Intelligent Controller)

   Adds intelligence and automation using AI/ML

   Two types:

       Near-Real-Time RIC (within 1 second)

     Non-Real-Time RIC (slower decisions like optimization over time)

// Key Concept: Open Interfaces

 Instead of one vendor doing everything, now:

   The RU, DU, and CU can come from different vendors

   They communicate using open, standardized protocols (like eCPRI, F1, E1)

// Benefits of O-RAN

Lower cost (no vendor lock-in)

Flexibility to mix and match vendors

Easier innovation (via open APIs and software-defined control)

AI/ML-based network optimization

//  Where Is O-RAN Used?

5G networks are the main target

Being adopted by big telecom operators like AT&T, Vodafone, Bharti Airtel, Jio, and others

// simple arch , main arch is in image

[Mobile Device]
       |
       v
+------------------+        +------------------+        +------------------+
|    Radio Unit    | <----> | Distributed Unit | <----> |  Central Unit    |
|      (RU)        | Fronthaul (eCPRI)         Midhaul (F1)                |
+------------------+        +------------------+        +------------------+
       |                                                |
       v                                                v
                         +-------------------------------+
                         |   RAN Intelligent Controller   |
                         |             (RIC)              |
                         | - Near-Real-Time RIC (rApps)   |
                         | - Non-Real-Time RIC (xApps)    |
                         +-------------------------------+
                                     |
                                     v
                              [Core Network]

// *************************************  RAN vs O-RAN  *************************************************************

Here’s a side-by-side comparison of Traditional RAN vs O-RAN to help you clearly understand the difference:

// Traditional RAN vs O-RAN

// Feature	               Traditional RAN	                                                                                                                  O-RAN (Open RAN)

Architecture	          Monolithic (everything from one vendor)	                                                                              Disaggregated (split into RU, DU, CU from different vendors)
Vendors	                  Single-vendor solution	                                                                                                          Multi-vendor interoperability
Interfaces	              Proprietary and closed	                                                                                                          Open and standardized (e.g., F1, E2, O1, A1)
Flexibility	                  Low — hardware and software tightly coupled	                                                                  High — components are modular and swappable
Innovation	              Slower — depends on vendor	                                                                                              Faster — open APIs and AI/ML integration via RIC
Cost	                      High (vendor lock-in)	                                                                                                          Lower (competition among vendors)
Deployment	          Static and manual	                                                                                                                  Automated and cloud-native via SMO
Use of AI/ML	          Minimal or vendor-controlled	                                                                                              Built-in via RIC (xApps, rApps)
Maintenance & 	      Manual, complex	                                                                                                                  Centralized, automated through SMO
Scaling

//Quick Summary

Traditional RAN is like buying a full package — you can’t mix brands.

O-RAN is like building your own PC — you choose the CPU, GPU, and RAM from different brands, and it all works together thanks to standard connectors.




// ***************************************************** Service Management and Orchestration (SMO)  ****************************************************************


Service Management and Orchestration (SMO) is a key part of the O-RAN architecture that manages, monitors, and automates the entire RAN environment — especially when its made up of multi-vendor, disaggregated components (RU, DU, CU, RIC, etc.).

// What is SMO in O-RAN?

The SMO (Service Management and Orchestration) framework is responsible for:

Provisioning: Deploying and configuring RAN components

Monitoring: Collecting performance data and health metrics

Fault Management: Detecting and resolving issues

Lifecycle Management: Upgrading, scaling, or shutting down functions

RIC Management: Hosting and managing xApps/rApps (for AI-driven optimization)

It acts as the "brain" or control center of the O-RAN system, ensuring everything works together properly.

// Main Functions of SMO

// Function	                          Description

Service Orchestration	     Automates deployment and coordination of RAN services
Network Management	     Provides FCAPS (Fault, Configuration, Accounting, Performance, Security) functions
RIC Management	             Deploys and manages rApps (Non-RT RIC) and xApps (Near-RT RIC)
Policy & Analytics	             Sets AI/ML-based optimization goals
Data Collection	                 Gathers telemetry data from RAN elements

// Interfaces in SMO

O1 Interface: Communicates with RU, DU, CU for management

A1 Interface: Connects SMO to Non-RT RIC for policy control

O2 Interface: Connects to cloud infrastructure for managing cloud-native network functions (NFVI)

// Example Use Cases

Automatically deploy a DU when a new site is added

Monitor all RUs and trigger alarms if one fails

Apply a new energy-saving policy to all base stations

Use AI models to optimize handovers between cells

// In Real Projects

As a developer, if you are working with SMO, you might:

Build APIs to manage RAN components

Integrate data pipelines from RAN to the dashboard

Develop automation scripts for deployment or scaling

Work on policy management systems


// *******************************  High-level diagram of the O-RAN architecture *********************

// Key Components in the Diagram:

Service Management and Orchestration (SMO) Framework

//The top purple box.

Manages the entire RAN (provisioning, fault management, optimization, etc.)

Interfaces:

O1 → Manages O-RAN Network Functions (like DU/CU)

A1 → Sends policies to Near-RT RIC

O2 → Manages infrastructure via O-Cloud

// Non-RT RIC (Non-Real-Time RAN Intelligent Controller)

Green box.

Handles long-term optimization and policy creation using AI/ML.

Sends policies to Near-RT RIC via A1.

// Near-RT RIC

Blue box.

Makes near-real-time decisions for traffic steering, load balancing, etc.

Communicates with network functions via the E2 interface (not explicitly shown but assumed in this block).

O-RAN Network Functions

These include the Central Unit (CU) and Distributed Unit (DU).

They control RAN processing and connect to the O-RU.

//O-RU (Radio Unit)

 Red box.

Sends/receives RF signals to/from user devices.

Managed via Open Fronthaul M-Plane.

//O-Cloud

Green block at the bottom.

Provides the virtualized infrastructure (compute, storage, network) to host O-RAN functions.

//5GC (5G Core)

/Beige block.

The core network of 5G.

Connects to the RAN via the NG interface (defined by 3GPP, not O-RAN).

Y1 Consumers

External functions/systems that use analytics or telemetry from the RAN.

Use the Y1 interface to pull data.

External System

Provides enrichment data (e.g., location, weather, user behavior) to SMO for intelligent decision-making.

// Interface Types (Legend at Bottom Right):
Color	              Type
Purple lines	      O-RAN Defined Interfaces (O1, A1, O2, Y1)
Orange lines	  3GPP Defined Interface (NG)
Black lines	      Out of Scope for O-RAN (used internally)

// Hardware Components

(These require physical equipment)

// O-RU (Radio Unit)                                                                        

Hardware

Located at the cell site (tower), transmits/receives RF signals.

Includes antennas, RF front-end, and signal processing chips.

// O-Cloud (Infrastructure Layer)

Hardware + Virtualization Platform

Data center hardware (servers, storage, networking).

Hosts virtualized RAN components (DU, CU, RICs, etc.)

// Software Components

(Deployed on general-purpose hardware or in the cloud)

// DU (Distributed Unit)

Software

Runs on O-Cloud hardware (virtualized or containerized).

Handles real-time functions (e.g., MAC, RLC, scheduling).

//CU (Central Unit)

Software

Also runs on O-Cloud.

Handles non-real-time RAN protocol layers (PDCP, SDAP).

//Near-RT RIC (RAN Intelligent Controller)

Software

Executes control functions close to real time (10 ms–1 s range).

Hosts xApps (microservices for real-time decisions).

//Non-RT RIC

Software

Part of the SMO framework.

Hosts rApps (for AI/ML, policy generation, etc.).

//SMO (Service Management and Orchestration)

Software

Manages the full RAN lifecycle: configuration, faults, performance, automation.

//External System / Y1 Consumers

Software

These could be analytics platforms, AI models, or third-party service interfaces.

// Summary

//  Component	                         Type
O-RU	                                 Hardware
O-Cloud	                             Hardware (runs software)
DU / CU	                             Software
Near-RT RIC	                     Software
Non-RT RIC	                     Software
SMO	                                 Software
External System	                 Software
5G Core (5GC)	                 Mostly Software (on telecom-grade servers)


// Text-based low-level architecture of O-RAN

                        +---------------------------------------------+
                        |     Service Management and Orchestration   |
                        |                  (SMO)                     |
                        +-----------------+---------------------------+
                                  | O1, A1, O2
                                  |
       +--------------------------+---------------------------+
       |                          |                           |
+-------------+         +----------------+           +----------------+
| Non-RT RIC  |         |  Near-RT RIC   |           |   O-Cloud Mgmt |
| (AI/ML,     | A1 ---> | (xApps control)| <--- E2   | (Infra via O2) |
| Policy Mgmt)|         | CU/DU behavior |           +----------------+
+-------------+         +----------------+                    |
                                  |                           |
                                 E2                          O2
                                  |                           |
                          +-------+--------+          +-------+------+
                          |                |          |              |
                     +---------+      +---------+     |              |
                     |   CU    | <--> |   DU    |     |   O-Cloud    |
                     |         | F1   |         |     | (Infra HW)   |
                     +---------+      +---------+     +--------------+
                          |                |
                          |                |
                        NG|              FH||
                          |                ||
                     +---------------------------+
                     |         O-RU              |
                     | (Radio Unit – HW)         |
                     +---------------------------+
                                  |
                               Over-the-Air
                                  |
                         +-----------------+
                         |  User Equipment |
                         +-----------------+


Legend:

SMO: Manages all RAN elements

Non-RT RIC: Optimizations, policies (non-real-time)

Near-RT RIC: Real-time control via xApps

CU: Central Unit – handles higher layers (PDCP, SDAP)

DU: Distributed Unit – handles lower layers (MAC, RLC)

O-RU: Radio Unit – physical radio transmitting/receiving RF

O-Cloud: Hosts all virtualized RAN software components

UE: User Equipment (phone, tablet, IoT device)


| Interface          | Connects                     | Purpose                                  |
| ------------------ | ---------------------------- | ---------------------------------------- |
| **O1**             | SMO ↔ DU/CU/RU               | Configuration, fault, performance mgmt   |
| **O2**             | SMO ↔ O-Cloud                | Infra orchestration                      |
| **A1**             | SMO/Non-RT RIC ↔ Near-RT RIC | Policy & ML model updates                |
| **E2**             | Near-RT RIC ↔ CU/DU          | Real-time control via xApps              |
| **F1**             | DU ↔ CU                      | RAN protocol data split                  |
| **NG**             | CU ↔ 5G Core (5GC)           | Control/user plane to core               |
| **FH (Fronthaul)** | DU ↔ RU                      | Transport of radio data (open fronthaul) |

 // in all of these which one is present on mobile tower
 
 Components Present on the Mobile Tower:

// 1. O-RU (Radio Unit)

Yes – Present on the tower

This is the main hardware unit on the tower.

It transmits and receives RF signals to/from user devices.

Converts analog radio signals to digital (and vice versa).

Connects via fiber or Ethernet to the DU (often located elsewhere).

//Optional/Edge Cases (May be Present):

// ⚠ 2. DU (Distributed Unit)

Sometimes co-located at the tower, especially in rural or edge deployments for low latency.

But in many modern setups, DU is centralized or placed at nearby edge data centers.


| Component             | Location                            |
| --------------------- | ----------------------------------- |
| **CU (Central Unit)** | Data center or centralized facility |
| **Near-RT RIC**       | Cloud / edge DC                     |
| **Non-RT RIC**        | SMO framework (central/cloud)       |
| **SMO**               | Telecom NOC / cloud platform        |
| **O-Cloud**           | Data center / centralized infra     |


// ************************************************** What is ONAP ****************************

ONAP stands for Open Network Automation Platform.

It is an open-source telecom network automation framework used to design, orchestrate, manage, and automate physical and virtual network functions and services.

//  What ONAP Does:

ONAP enables telecom operators to:

Automate network lifecycle management (provisioning, scaling, healing).

Design and deploy services like 5G, VoLTE, or SD-WAN.

Integrate with SDN/NFV platforms and traditional networks.

Monitor and optimize performance using analytics and policies.

// Key Capabilities of ONAP:

Feature	                                                Purpose

Service Orchestration	                        Designs and deploys end-to-end network services
Resource Orchestration	                        Manages VMs, containers, physical resources
Closed-Loop Automation	                    Uses analytics to detect issues and fix them automatically
Policy Framework	                                Defines automation logic and decision rules
Analytics and Monitoring	                    Collects metrics and events from network functions
Inventory Management (A&AI)	            Stores service and resource data dynamically

// Use Case Example:

A telecom operator wants to roll out a 5G network slice for gaming apps. ONAP can:

Model the service graph (e.g., firewall → DU → CU → Core).

Provision virtual network functions (VNFs or CNFs).

Monitor their health/performance.

Automatically scale them or reroute traffic based on demand.

//  ONAP in the O-RAN Context:

ONAP can work with O-RAN SMO or as part of it.

It can help orchestrate O-Cloud, configure CU/DU/RIC, and automate service management.

Text-Based ONAP Architecture




                           +------------------------------------+
                           |        ONAP Portal (UI/API)       |
                           +----------------+-------------------+
                                            |
                                            v
+----------------------+     +------------------------+     +--------------------+
|   Design Framework   | --> |  Service Orchestrator  | --> | Resource Orchestr. |
|  (Service Designer)  |     |  (SO)                  |     |  (Multi-Cloud)     |
+----------------------+     +------------------------+     +--------------------+
                                            |
                                            v
                           +------------------------------------+
                           |       Controllers (e.g., SDN-C)    |
                           +------------------------------------+
                                            |
                                            v
+------------------+   +-----------------+   +----------------+   +--------------------+
| Policy Framework |   |  A&AI Inventory |   |  DCAE (Analytics) |   |  VES/Event Bus     |
+------------------+   +-----------------+   +----------------+   +--------------------+
         |                        |                     |                       |
         v                        v                     v                       v
   +------------------------- Integrated into Closed Loop Automation ---------------------------+
   |                                                                                             |
   |  1. VES collects events →                                                                   |
   |  2. DCAE analyzes data →                                                                    |
   |  3. Policy decides action →                                                                 |
   |  4. SO or Controller executes it                                                           |
   +---------------------------------------------------------------------------------------------+



| Component                                         | Role                                                     |
| ------------------------------------------------- | -------------------------------------------------------- |
| **Portal**                                        | Web UI and API for developers and operators              |
| **Design Framework**                              | Service model designer (creates TOSCA models)            |
| **SO (Service Orchestrator)**                     | Orchestrates end-to-end service lifecycles               |
| **Resource Orchestrator (Multi-Cloud)**           | Provisions resources across cloud/virtual/physical infra |
| **SDN Controller (SDN-C, APP-C)**                 | Manages network-level configurations                     |
| **Policy**                                        | Defines automation rules, triggers                       |
| **A\&AI** (Active & Available Inventory)          | Central database for services and resources              |
| **DCAE** (Data Collection, Analytics, and Events) | Analyzes metrics and performance                         |
| **VES/Event Bus**                                 | Event stream input from network and apps                 |


// Closed-Loop Automation Example:

Event: O-RU CPU usage exceeds threshold →

Analytics (DCAE): Detects anomaly →

Policy: Triggers scaling →

SO: Orchestrates new DU instance via Multi-Cloud →

Inventory (A&AI): Updates records.

//  Would you like a simplified real-world use case based on your telecom tower project?


Great! Let’s walk through a real-world simplified ONAP use case based on your telecom project — where you access mobile towers remotely via software.

// Use Case: Remote Monitoring & Auto-Healing of a Mobile Tower (O-RU)

// Scenario:
You work for a telecom operator. Your system monitors O-RU (Radio Unit) health on multiple towers. If a radio unit overheats or fails, the system should automatically respond — without manual intervention.

⚙️ How ONAP Helps:
1. VES (Virtual Event Streaming)
O-RU sends health data (temperature, signal strength, CPU load).

These metrics are streamed into ONAP using VES agents.

2. DCAE (Analytics Engine)
DCAE detects that the temperature of an O-RU has exceeded the threshold.

It processes the data and creates an anomaly alert.

3. Policy Engine
A predefined policy says:

"If O-RU temp > 85°C for more than 2 minutes → trigger cooling sequence or re-route traffic."

4. Orchestrator (SO + Controllers)
ONAP Service Orchestrator (SO) talks to SDN Controller.

It re-routes the traffic from the hot O-RU to nearby O-RUs.

If needed, it sends a command to restart the RU, or provision a new one via cloud.

5. A&AI Inventory
A&AI updates the network topology and reflects the changes — showing the rerouted path and current O-RU status.







































































